extends layout

block append head
  script(type="text/javascript", src="http://d3js.org/d3.v3.min.js", charset="utf-8")
  
block content
  h1= title
  p Welcome to #{title}
  
  #movies_a_year_chart
  #ranks_distribution_chart
    
  script.

    var m = [80, 80, 80, 80],
    w = 960 - m[1] - m[3],
    h = 500 - m[0] - m[2],
    parse = d3.time.format("%Y").parse;

    d3.json('/s/years', function(err, years){
      // Scales and axes. Note the inverted domain for the y-scale: bigger is up!
      var x = d3.time.scale().range([0, w]),
          y = d3.scale.linear().range([h, 0]),
          xAxis = d3.svg.axis().scale(x)
            .ticks(d3.time.years, 5)
            .tickSize(-h).orient("bottom"),
          yAxis = d3.svg.axis().scale(y)
            .ticks(4)
            .orient("right");

      // An area generator, for the light fill.
      var area = d3.svg.area()
          .interpolate("monotone")
          .x(function(d) { 
            return x(d.y); 
          })
          .y0(h)
          .y1(function(d) { 
            return y(d.c); 
          });

      // A line generator, for the dark stroke.
      var line = d3.svg.line()
          .interpolate("monotone")
          .x(function(d) { return x(d.y); })
          .y(function(d) { return y(d.c); });

      years.forEach(function(d) {
        d.y = parse(d.y.toString());
        d.c = +d.c;
      });

      // Compute the minimum and maximum date, and the maximum price.
      x.domain([years[0].y, years[years.length - 1].y]);
      y.domain([0, d3.max(years, function(d) { return d.c; })]).nice();

      var svg = d3.select("#movies_a_year_chart").append("svg:svg")
          .attr("width", w + m[1] + m[3])
          .attr("height", h + m[0] + m[2])
        .append("svg:g")
          .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

      // Add the clip path.
      svg.append("svg:clipPath")
          .attr("id", "clip")
        .append("svg:rect")
          .attr("width", w)
          .attr("height", h);

      // Add the area path.
      svg.append("svg:path")
          .attr("class", "area")
          .attr("clip-path", "url(#clip)")
          .attr("d", area(years));

      // Add the x-axis.
      svg.append("svg:g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + h + ")")
          .call(xAxis);

      // Add the y-axis.
      svg.append("svg:g")
          .attr("class", "y axis")
          .attr("transform", "translate(" + w + ",0)")
          .call(yAxis);

      // Add the line path.
      svg.append("svg:path")
          .attr("class", "line")
          .attr("clip-path", "url(#clip)")
          .attr("d", line(years));

      svg.append("svg:text")
           .attr("x", w - 6)
           .attr("y", h - 6)
           .attr("text-anchor", "end")
           .text("Films a year");
    });

    d3.json('/s/ranks', function(err, ranks){
      var x = d3.scale.linear()
        .range([0, w]);

      var y = d3.scale.linear()
        .range([h, 0]);

      var xAxis = d3.svg.axis()
          .scale(x)
          .ticks(20)
          .tickSize(-h)
          .orient("bottom");

      var yAxis = d3.svg.axis()
          .scale(y)
          .ticks(4)
          .orient("left");

      var area = d3.svg.area()
            .x(function(r) { return x(r.r); })
            .y0(h)
            .y1(function(r) { return y(r.c); });

      var line = d3.svg.line()
          .x(function(r) { return x(r.r); })
          .y(function(r) { return y(r.c); });

      var svg = d3.select("#ranks_distribution_chart").append("svg")
            .attr("width", w + m[1] + m[3])
            .attr("height", h + m[0] + m[2])
          .append("g")
            .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

      ranks.forEach(function(r) {
        r.r = +r.r;
        r.c = +r.c;
      });

      x.domain(d3.extent(ranks, function(r) { return r.r; }));
      y.domain([0, d3.max(ranks, function(r) { return r.c; })]);

      svg.append("path")
          .datum(ranks)
          .attr("class", "area")
          .attr("d", area);

      svg.append("svg:path")
          .attr("class", "line")
          .attr("clip-path", "url(#clip)")
          .attr("d", line(ranks));

      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + h + ")")
          .call(xAxis)
        .append("text")
          //- .attr("transform", "rotate(-90)")
          .attr("y", -12)
          .attr("x", w - 6)
          .attr("dy", ".71em")
          .style("text-anchor", "end")
          .text("Ranks");

      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
        .append("text")
          .attr("transform", "rotate(-90)")
          .attr("y", 6)
          .attr("dy", ".71em")
          .style("text-anchor", "end")
          .text("Films");
    });

    //- var w = 1100,
    //-   h = 420,
    //-   p = 10;

    //- var margin = {top: 20, right: 40, bottom: 30, left: 20},
    //-   width = 960 - margin.left - margin.right,
    //-   height = 500 - margin.top - margin.bottom,
    //-   barWidth = Math.floor(width / 19) - 1;
      
    //- d3.json('/s', function(err, data){
    
    //-   var bar_height = d3.scale.linear()
    //-     .domain(d3.extent(data, function(d) { return d.c; }) )  // min max of count
    //-     .range([p,height-p]);  // min max of area to plot in
    
    //-   var bar_xpos = d3.scale.linear()
    //-     .domain(d3.extent(data, function(d) { return d.y; }) )  // min max of year
    //-     .range([p,width-p]);  // min max of area to plot in
      
    //-   var svg = d3.select("svg")
    //-     .attr("width", width)
    //-     .attr("height", height);

    //-   var x = d3.scale.linear()
    //-       .range([barWidth / 2, width - barWidth / 2]);

    //-   var y = d3.scale.linear()
    //-       .range([height, 0]);

    //-   var yAxis = d3.svg.axis()
    //-       .scale(y)
    //-       .orient("right")
    //-       .tickSize(-width)
    //-       .tickFormat(function(d) { return Math.round(d / 1e6) + "M"; }); 

    //-   // Add an axis to show the population values.
    //-   svg.append("g")
    //-       .attr("class", "y axis")
    //-       .attr("transform", "translate(" + w + ",0)")
    //-       .call(yAxis)
    //-     .selectAll("g")
    //-     .filter(function(value) { return !value; })
    //-       .classed("zero", true); 
    
    //-   svg.selectAll("rect")
    //-     .data(data)
    //-     .enter().append("rect")
    //-     .attr("x", function(d) {
    //-       return bar_xpos(d.y); })
    //-     .attr("y", function(d) { 
    //-       return height - bar_height(d.c); })
    //-     .attr("width", 10)
    //-     .attr("height", function(d) {
    //-       return bar_height(d.c); 
    //-     })
    //-     .attr("fill", "steelblue")
    //- });

  